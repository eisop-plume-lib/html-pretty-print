plugins {
  id 'java'
  id 'application'

  // To create a fat jar build/libs/...-all.jar, run: ./gradlew shadowJar
  id 'com.gradleup.shadow' version '9.2.2'

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  // Requires JDK 11 or higher; the plugin crashes under JDK 8.
  id 'com.diffplug.spotless' version '8.0.0'

  // Error Prone linter
  id 'net.ltgt.errorprone' version '4.3.0'

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.6.60' apply false
}

repositories {
  mavenCentral()
  maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

ext {
  errorproneVersion = '2.43.0'
  isJava17orHigher = JavaVersion.current() >= JavaVersion.VERSION_17
  isJava21orHigher = JavaVersion.current() >= JavaVersion.VERSION_21
}

dependencies {
  implementation 'org.ccil.cowan.tagsoup:tagsoup:1.2.1'
  implementation 'xom:xom:1.3.9'

  compileOnly "com.google.errorprone:error_prone_annotations:${errorproneVersion}"
  errorprone("com.google.errorprone:error_prone_core:${errorproneVersion}")

  testImplementation 'org.junit.jupiter:junit-jupiter:6.0.0'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
  mainClass = 'org.plumelib.htmlprettyprint.HtmlPrettyPrint'
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

test {
  useJUnitPlatform {
    includeEngines 'junit-jupiter'
    excludeEngines 'junit-vintage'
  }
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    leadingTabsToSpaces(2)
    endWithNewline()
  }
  java {
    targetExclude('**/WeakIdentityHashMap.java')
    googleJavaFormat()
    formatAnnotations()
  }
  groovyGradle {
    target '**/*.gradle'
    greclipse()  // which formatter Spotless should use to format .gradle files.
    leadingTabsToSpaces(2)
    trimTrailingWhitespace()
    // endWithNewline() // Don't want to end empty files with a newline
  }
}

// Error Prone linter

tasks.withType(JavaCompile).configureEach {
  // "-processing" avoids javac warning "No processor claimed any of these annotations".
  // "-Xlint:-options" is because of JDK 21 warning "source value 8 is obsolete..."
  options.compilerArgs << '-Xlint:all,-processing,-options' << '-Werror'
  options.errorprone.enabled = isJava17orHigher
  options.errorprone {
    disable('ExtendsObject')  // Incorrect when using the Checker Framework
    disable('ReferenceEquality') // Use Interning Checker instead.
  }
}

// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

if (true) {
  // Use the released version of the EISOP Checker Framework.
  ext.checkerFrameworkVersion = '3.49.3-eisop1'
} else {
  // To use a snapshot version of the EISOP Checker Framework.
  // TODO: Change the above test to false to use a snapshot.
  // ext.checkerFrameworkVersion = '3.49.3-eisop1-SNAPSHOT'
  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'minutes'
  }
}

dependencies {
  compileOnly "io.github.eisop:checker-qual:${checkerFrameworkVersion}"
  testCompileOnly "io.github.eisop:checker-qual:${checkerFrameworkVersion}"
  checkerFramework "io.github.eisop:checker-qual:${checkerFrameworkVersion}"
  checkerFramework "io.github.eisop:checker:${checkerFrameworkVersion}"
}

// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty('cfLocal')) {
  def cfHome = String.valueOf(System.getenv('CHECKERFRAMEWORK'))
  dependencies {
    compileOnly files(cfHome + '/checker/dist/checker-qual.jar')
    testCompileOnly files(cfHome + '/checker/dist/checker-qual.jar')
    checkerFramework files(cfHome + '/checker/dist/checker.jar')
  }
}

checkerFramework {
  checkers = [
    // No need to run CalledMethodsChecker, because ResourceLeakChecker does so.
    // 'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.checker.signedness.SignednessChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
  ]
  extraJavacArgs = [
    // No "'-Werror'" because of JDK 21 warning "source value 8 is obsolete..."
    // '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnRedundantAnnotations',
    '-AwarnUnneededSuppressions',
    '-AnoJreVersionCheck',
    '-Aversion',
  ]
}

// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  // No "'-Werror'" because of JDK 21 warning "source value 8 is obsolete..."
  // options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('Xdoclint:all', '-quiet')
  options.addStringOption('private', '-quiet')
  options.addStringOption('source', '8')
  doLast {
    ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
    flags:'g', byline:true) {
      fileset(dir: destinationDir)
    }
  }
}
check.dependsOn javadoc

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc 'org.plumelib:require-javadoc:2.0.0'
}
task requireJavadoc(type: JavaExec) {
  group = 'Documentation'
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = 'org.plumelib.javadoc.RequireJavadoc'
  classpath = configurations.requireJavadoc
  args 'src/main/java'
  jvmArgs += [
    '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
    '--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
    '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
    '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
    '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
  ]
}
check.dependsOn requireJavadoc

// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description = 'Run etags to create an Emacs TAGS table'
  commandLine 'bash', '-c', "find src/ -name '*.java' | sort | xargs etags"
}
